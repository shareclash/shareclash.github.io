<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://shareclash.github.io/news/article-83271.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>springMVC拦截器从Request中获取Json格式并解决request的请求流只能读取一次的问题</title>
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
        <meta name="description" content="背景  在使用SSM（你问我什么叫SSM，我一拳锤爆你的狗头）做开发的时候，经常会使用@RequestBody注解，这个注解是非常的好用。但是如果你想在请求参数传到后台的时候做一个参数检验，当然可以！" />
    
    <!-- Favicon -->
    <link href="/assets/website/img/shareclash/favicon.ico" rel="icon">

    <meta name="author" content="ShareClash官网订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://shareclash.github.io/news/article-83271.htm" />
    <meta property="og:site_name" content="ShareClash官网订阅站" />
    <meta property="og:title" content="springMVC拦截器从Request中获取Json格式并解决request的请求流只能读取一次的问题" />
    <meta property="og:image" content="https://shareclash.github.io/uploads/20240527/0991722e16a3086b18c86db304c5ab53.webp" />
        <meta property="og:release_date" content="2025-03-28T09:55:05" />
    <meta property="og:updated_time" content="2025-03-28T09:55:05" />
        <meta property="og:description" content="背景  在使用SSM（你问我什么叫SSM，我一拳锤爆你的狗头）做开发的时候，经常会使用@RequestBody注解，这个注解是非常的好用。但是如果你想在请求参数传到后台的时候做一个参数检验，当然可以！" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="springMVC拦截器从Request中获取Json格式并解决request的请求流只能读取一次的问题">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
        
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Raleway:300,300i,400,400i,500,500i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="/assets/website/js/frontend/shareclash/aos/aos.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/shareclash/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/shareclash/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/shareclash/boxicons/css/boxicons.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/shareclash/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/shareclash/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/shareclash/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-Z0SYCQN5K6"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-Z0SYCQN5K6');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ======= Header ======= -->
    <header id="header" class="fixed-top d-flex align-items-center">
        <div class="container d-flex align-items-center">
            <div class="logo me-auto">
                <a href="/">
                                <span>ShareClash</span>
                                </a>
            </div>
            <nav id="navbar" class="navbar order-last order-lg-0">
                <ul>
                                        <li><a class="nav-link" href="/">首页</a></li>
                                        <li><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                        <li><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a class="nav-link" href="/client.htm">客户端</a></li>
                                        <li><a class="nav-link" href="/news/">新闻资讯</a></li>
                                    </ul>
                <i class="bi bi-list mobile-nav-toggle"></i>
            </nav><!-- .navbar -->
            <div class="header-social-links d-flex align-items-center">
                <a href="#" class="twitter"><i class="bi bi-twitter"></i></a>
                <a href="#" class="facebook"><i class="bi bi-facebook"></i></a>
                <a href="#" class="instagram"><i class="bi bi-instagram"></i></a>
                <a href="#" class="linkedin"><i class="bi bi-linkedin"></i></i></a>
            </div>
        </div>
    </header><!-- End Header -->
    <main id="main">
        <!-- ======= Breadcrumbs ======= -->
        <section id="breadcrumbs" class="breadcrumbs">
            <div class="container">
                <ol>
                    <li><a href="/">首页</a></li>
                    <li><a href="/news/">新闻资讯</a></li>
                    <li>正文</li>
                </ol>
                <h1>新闻资讯</h1>
            </div>
        </section><!-- End Breadcrumbs -->
        <section class="inner-page">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-tomorrow-night"> <h5 id="背景">背景</h5> <blockquote> <p>在使用SSM（你问我什么叫SSM，我一拳锤爆你的狗头）做开发的时候，经常会使用@RequestBody注解，这个注解是非常的好用。但是如果你想在请求参数传到后台的时候做一个参数检验，当然可以！使用SpringMVC的拦截器，在拦截器里把request的数据读取出来不就行了！！，但是在使用了拦截器的时候会出现一个问题！！！！你在拦截器读取了request的数据，在Controller里面@RequestBody注解获取Json就会失败就读取不到数据！！！！那就是RequestBody是流的形式读取的，流读取一次就没有了！！</p> </blockquote> <h5 id="为什么使用requestbody只能读取一遍请求数据流">为什么使用RequestBody只能读取一遍请求数据流？</h5> <blockquote> <p>那是因为流对应的是数据，数据放在内存中，有的是部分放在内存中。read 一次标记一次当前位置（mark position），第二次read就从标记位置继续读（从内存中copy）数据。 所以这就是为什么读了一次第二次是空了。 怎么让它不为空呢？只要inputstream 中的pos 变成0就可以重写读取当前内存中的数据。javaAPI中有一个方法<strong><em>public void reset()</em></strong> 这个方法就是可以重置pos为起始位置，但是不是所有的IO读取流都可以调用该方法！ServletInputStream是不能调用reset方法，这就导致了只能调用一次getInputStream()。</p> </blockquote> <h5 id="解决办法重写httpservletrequestwrapper方法">解决办法：重写HttpServletRequestWrapper方法</h5> <blockquote> <p>这种方法就是通过重写HttpServletRequestWrapper把request的保存下来，然后通过过滤器保存下来的request在填充进去，这样就可以多次读取request了</p> </blockquote> <p>1.重写HttpServletRequestWrapper方法</p> <pre class="prettyprint"><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestWrapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServletRequestWrapper</span> {<!-- --></span>     <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String body;     <span class="hljs-keyword">public</span> <span class="hljs-title">RequestWrapper</span>(HttpServletRequest request) <span class="hljs-keyword">throws</span> IOException {         <span class="hljs-keyword">super</span>(request);         StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();         BufferedReader bufferedReader = <span class="hljs-keyword">null</span>;         <span class="hljs-keyword">try</span> {             InputStream inputStream = request.getInputStream();             <span class="hljs-keyword">if</span> (inputStream != <span class="hljs-keyword">null</span>) {                 bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(inputStream));                 <span class="hljs-keyword">char</span>[] charBuffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">128</span>];                 <span class="hljs-keyword">int</span> bytesRead = -<span class="hljs-number">1</span>;                 <span class="hljs-keyword">while</span> ((bytesRead = bufferedReader.read(charBuffer)) &gt; <span class="hljs-number">0</span>) {                     stringBuilder.append(charBuffer, <span class="hljs-number">0</span>, bytesRead);                 }             } <span class="hljs-keyword">else</span> {                 stringBuilder.append(<span class="hljs-string">""</span>);             }         } <span class="hljs-keyword">catch</span> (IOException ex) {             <span class="hljs-keyword">throw</span> ex;         } <span class="hljs-keyword">finally</span> {             <span class="hljs-keyword">if</span> (bufferedReader != <span class="hljs-keyword">null</span>) {                 <span class="hljs-keyword">try</span> {                     bufferedReader.close();                 } <span class="hljs-keyword">catch</span> (IOException ex) {                     <span class="hljs-keyword">throw</span> ex;                 }             }         }         body = stringBuilder.toString();     }      <span class="hljs-annotation">@Override</span>     <span class="hljs-keyword">public</span> ServletInputStream <span class="hljs-title">getInputStream</span>() <span class="hljs-keyword">throws</span> IOException {         <span class="hljs-keyword">final</span> ByteArrayInputStream byteArrayInputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(body.getBytes());         ServletInputStream servletInputStream = <span class="hljs-keyword">new</span> ServletInputStream() {             <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFinished</span>() {                 <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;             }             <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isReady</span>() {                 <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;             }             <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setReadListener</span>(ReadListener readListener) {}             <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span>() <span class="hljs-keyword">throws</span> IOException {                 <span class="hljs-keyword">return</span> byteArrayInputStream.read();             }         };         <span class="hljs-keyword">return</span> servletInputStream;      }     <span class="hljs-annotation">@Override</span>     <span class="hljs-keyword">public</span> BufferedReader <span class="hljs-title">getReader</span>() <span class="hljs-keyword">throws</span> IOException {         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(<span class="hljs-keyword">this</span>.getInputStream()));     }     <span class="hljs-keyword">public</span> String <span class="hljs-title">getBody</span>() {         <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.body;     }  }</code></pre> <p>2.拦截器CommonInterceptor</p> <pre class="prettyprint"><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HandlerInterceptorAdapter</span> {<!-- --></span>     <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Log log = LogFactory.getLog(CommonInterceptor.class);     <span class="hljs-keyword">public</span> <span class="hljs-title">CommonInterceptor</span>() {     }     <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span>(HttpServletRequest request, HttpServletResponse response, Object handler) <span class="hljs-keyword">throws</span> Exception {         RequestWrapper myRequestWrapper = <span class="hljs-keyword">new</span> RequestWrapper((HttpServletRequest) request);         String body = myRequestWrapper.getBody();         System.out.println(<span class="hljs-string">"我是拦截器："</span>+body);         <span class="hljs-comment">// do something</span>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;      }     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span>(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) <span class="hljs-keyword">throws</span> Exception {         <span class="hljs-keyword">super</span>.postHandle(request, response, handler, modelAndView);     }     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span>(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) <span class="hljs-keyword">throws</span> Exception {         <span class="hljs-keyword">super</span>.afterCompletion(request, response, handler, ex);     }     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterConcurrentHandlingStarted</span>(HttpServletRequest request, HttpServletResponse response, Object handler) <span class="hljs-keyword">throws</span> Exception {         <span class="hljs-keyword">super</span>.afterConcurrentHandlingStarted(request, response, handler);     } }</code></pre> <p>3.在spring-mvc.xml声明springMVC的拦截器</p> <pre class="prettyprint"><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">mvc:interceptors</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">mvc:interceptor</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-title">mvc:mapping</span> <span class="hljs-attribute">path</span>=<span class="hljs-value">"/**"</span>/&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-title">bean</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"com.sdut.platform.core.CommonInterceptor"</span>/&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-title">mvc:interceptor</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">mvc:interceptors</span>&gt;</span></code></pre> <p>4.过滤器HttpServletFilter类</p> <pre class="prettyprint"><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpServletFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> {<!-- --></span>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span>(FilterConfig filterConfig) <span class="hljs-keyword">throws</span> ServletException {     }     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span>(ServletRequest request, ServletResponse response, FilterChain chain) <span class="hljs-keyword">throws</span> IOException, ServletException {         ServletRequest requestWrapper = <span class="hljs-keyword">null</span>;         System.out.println(<span class="hljs-string">"我是过滤器"</span>);         <span class="hljs-keyword">if</span>(request <span class="hljs-keyword">instanceof</span> HttpServletRequest) {             requestWrapper = <span class="hljs-keyword">new</span> RequestWrapper((HttpServletRequest) request);         }         <span class="hljs-keyword">if</span>(requestWrapper == <span class="hljs-keyword">null</span>) {             chain.doFilter(request, response);         } <span class="hljs-keyword">else</span> {             chain.doFilter(requestWrapper, response);         }     }     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span>() {      } }</code></pre> <p>5.在web.xml中注册过滤器</p> <pre class="prettyprint"><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">filter</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">filter-name</span>&gt;</span>requestFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-name</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">filter-class</span>&gt;</span>com.sdut.platform.core.HttpServletFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-class</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">filter</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">filter-mapping</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">filter-name</span>&gt;</span>requestFilter<span class="hljs-tag">&lt;/<span class="hljs-title">filter-name</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-title">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-title">url-pattern</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">filter-mapping</span>&gt;</span></code></pre> <p>经过测试完全可以并且不出现其他错误。</p> <h5 id="解决办法aop切面获取request一般做日志管理会经常使用这种办法">解决办法：AOP切面获取request(一般做日志管理会经常使用这种办法)</h5> <p>这个办法我还没做测试 </p> <pre class="prettyprint"><code class="hljs avrasm">HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder<span class="hljs-preprocessor">.currentRequestAttributes</span>())<span class="hljs-preprocessor">.getRequest</span>()<span class="hljs-comment">;</span> HttpServletResponse response = ((ServletRequestAttributes) RequestContextHolder<span class="hljs-preprocessor">.currentRequestAttributes</span>())<span class="hljs-preprocessor">.getResponse</span>()<span class="hljs-comment">;</span></code></pre> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-83270.htm">DecimalFormat保留小数位</a></p>
                                        <p>下一个：<a href="/news/article-83966.htm">PHP魔术方法</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-3-14-free-clash.htm" title="3月14日 | 最新Shadowrocket/V2ray/SSR/Clash高速免费节点，最高速度19.4M/S 免费Clash机场订阅地址">3月14日 | 最新Shadowrocket/V2ray/SSR/Clash高速免费节点，最高速度19.4M/S 免费Clash机场订阅地址</a></li>
                        <li class="py-2"><a href="/news/article-69038.htm" title="一种优雅的Golang的库插件注册加载机制">一种优雅的Golang的库插件注册加载机制</a></li>
                        <li class="py-2"><a href="/news/article-51562.htm" title="中国动物疫苗厂家排名前十有哪些（动物疫苗有哪些大厂家）">中国动物疫苗厂家排名前十有哪些（动物疫苗有哪些大厂家）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-22-free-node-subscribe.htm" title="2月22日 | 最新Shadowrocket/V2ray/SSR/Clash高速免费节点，最高速度22.4M/S 免费Clash机场订阅地址">2月22日 | 最新Shadowrocket/V2ray/SSR/Clash高速免费节点，最高速度22.4M/S 免费Clash机场订阅地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-12-clash-node-daily-updates.htm" title="3月12日 | 最新SSR/Clash/V2ray/Shadowrocket高速免费节点，最高速度18.3M/S 免费Clash机场订阅地址">3月12日 | 最新SSR/Clash/V2ray/Shadowrocket高速免费节点，最高速度18.3M/S 免费Clash机场订阅地址</a></li>
                        <li class="py-2"><a href="/news/article-47479.htm" title="Python  turtle  模块可以编写游戏，是真的吗？">Python  turtle  模块可以编写游戏，是真的吗？</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-17-free-shadowrocket-node.htm" title="3月17日 | 最新Clash/V2ray/SSR/Shadowrocket高速免费节点，最高速度22.2M/S 免费Clash机场订阅地址">3月17日 | 最新Clash/V2ray/SSR/Shadowrocket高速免费节点，最高速度22.2M/S 免费Clash机场订阅地址</a></li>
                        <li class="py-2"><a href="/news/article-39079.htm" title="vue中巧用三元表达式解析_vue.js">vue中巧用三元表达式解析_vue.js</a></li>
                        <li class="py-2"><a href="/news/article-55332.htm" title="JS/JQ动态创建（添加）optgroup和option属性">JS/JQ动态创建（添加）optgroup和option属性</a></li>
                        <li class="py-2"><a href="/news/article-41033.htm" title="动物疫苗间隔时间多长打一次比较好（动物疫苗多长时间内打）">动物疫苗间隔时间多长打一次比较好（动物疫苗多长时间内打）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div>
        </section>
    </main><!-- End #main -->
        <!-- ======= Footer ======= -->
    <footer id="footer">
        <div class="container">
            <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                ShareClash官网订阅站 版权所有
                <br />
                Powered by WordPress
            </div>
        </div>
    </footer><!-- End Footer -->
    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/shareclash/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/shareclash/aos/aos.js"></script>
    <script src="/assets/website/js/frontend/shareclash/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/shareclash/isotope-layout/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/shareclash/php-email-form/validate.js"></script>
    <script src="/assets/website/js/frontend/shareclash/swiper/swiper-bundle.min.js"></script>
    <!-- Template Main JS File -->
    <script src="/assets/website/js/frontend/shareclash/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>