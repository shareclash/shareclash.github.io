<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://shareclash.github.io/news/article-81813.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>Spring MVC启动原理详解</title>
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
        <meta name="description" content="在《从Servlet到Spring MVC》中，介绍了基于xml配置使用的方式，但我们我现在用的更多的基于注解零配置的方式，尤其是在使用SpringBoot的时候，只需要引入web的start包即可，" />
    
    <!-- Favicon -->
    <link href="/assets/website/img/shareclash/favicon.ico" rel="icon">

    <meta name="author" content="ShareClash官网订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://shareclash.github.io/news/article-81813.htm" />
    <meta property="og:site_name" content="ShareClash官网订阅站" />
    <meta property="og:title" content="Spring MVC启动原理详解" />
    <meta property="og:image" content="https://shareclash.github.io/uploads/20240527/dc3e38094db4145b335793b458a1c19c.webp" />
        <meta property="og:release_date" content="2025-03-26T08:56:43" />
    <meta property="og:updated_time" content="2025-03-26T08:56:43" />
        <meta property="og:description" content="在《从Servlet到Spring MVC》中，介绍了基于xml配置使用的方式，但我们我现在用的更多的基于注解零配置的方式，尤其是在使用SpringBoot的时候，只需要引入web的start包即可，" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Spring MVC启动原理详解">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
        
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Raleway:300,300i,400,400i,500,500i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="/assets/website/js/frontend/shareclash/aos/aos.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/shareclash/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/shareclash/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/shareclash/boxicons/css/boxicons.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/shareclash/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/shareclash/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/shareclash/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-Z0SYCQN5K6"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-Z0SYCQN5K6');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ======= Header ======= -->
    <header id="header" class="fixed-top d-flex align-items-center">
        <div class="container d-flex align-items-center">
            <div class="logo me-auto">
                <a href="/">
                                <span>ShareClash</span>
                                </a>
            </div>
            <nav id="navbar" class="navbar order-last order-lg-0">
                <ul>
                                        <li><a class="nav-link" href="/">首页</a></li>
                                        <li><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                        <li><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a class="nav-link" href="/client.htm">客户端</a></li>
                                        <li><a class="nav-link" href="/news/">新闻资讯</a></li>
                                    </ul>
                <i class="bi bi-list mobile-nav-toggle"></i>
            </nav><!-- .navbar -->
            <div class="header-social-links d-flex align-items-center">
                <a href="#" class="twitter"><i class="bi bi-twitter"></i></a>
                <a href="#" class="facebook"><i class="bi bi-facebook"></i></a>
                <a href="#" class="instagram"><i class="bi bi-instagram"></i></a>
                <a href="#" class="linkedin"><i class="bi bi-linkedin"></i></i></a>
            </div>
        </div>
    </header><!-- End Header -->
    <main id="main">
        <!-- ======= Breadcrumbs ======= -->
        <section id="breadcrumbs" class="breadcrumbs">
            <div class="container">
                <ol>
                    <li><a href="/">首页</a></li>
                    <li><a href="/news/">新闻资讯</a></li>
                    <li>正文</li>
                </ol>
                <h1>新闻资讯</h1>
            </div>
        </section><!-- End Breadcrumbs -->
        <section class="inner-page">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <p>在<a href="https://blog.csdn.net/sermonlizhi/article/details/12197631http://img.555519.xyz/uploads3/20220902/954e3384a4d7968e5b3e57f60bb9efcf.jpg" rel="nofollow" class="fancybox" data-fancybox-group="button">《从Servlet到Spring MVC》</a>中，介绍了基于xml配置使用的方式，但我们我现在用的更多的基于注解零配置的方式，尤其是在使用SpringBoot的时候，只需要引入web的start包即可，这边文章前面会简单介绍一下Spring MVC零配置的的使用，然后详细分析Spring MVC启动的原理，可以更加深入理解为什么只需要简单的配置，就可以提供强大的功能</p> <h2><a id="Spring_MVC_2" rel="nofollow"></a>一、零配置Spring MVC实现</h2> <p>在之前，先简单介绍一下Spring MVC是如何整合Spring的，在Spring MVC的官网，提供了一张父子容器的图：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220902/954e3384a4d7968e5b3e57f60bb9efcf.jpg" alt="Spring MVC启动原理详解"></p> <p>从上面这张图可以清晰的看到，在Spring MVC整合Spring中，其实是由两个容器组成的，其中下面的根容器就是Spring自身的容器，而上面的容器，是Spring MVC特有的容器，那为什么要这么设计呢？只是用一个容器不行吗</p> <p>其实这种设计方法最大的考量兼容第三方MVC框架，比如以前常用的Struts框架，MVC容器用于存放Controller、视图解析器、处理器映射器这样的Bean，而提供服务的Bean由下层的Spring容器来管理，实现了解耦。但在SpringBoot中就不再使用父子容器，SpringBoot作为一个集成的解决方法，就是使用SpringMVC来作为Web框架，不需要再兼容其他第三方框架，那么直接使用是一个容器就可以了。</p> <p>既然由两个容器，那么两个容器再启动时，就会用到不同的配置来加载Bean，所有使用零配置实现SpringMVC时首先就要定义两个配置文件</p> <h3><a id="11__14" rel="nofollow"></a>1.1 定义配置文件</h3> <p>定义根容器的配置类，不扫描@Controller注解的类和子容器的配置类</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages<span class="token operator">=</span><span class="token string">"com.lizhi"</span><span class="token punctuation">,</span>excludeFilters<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@ComponentScan.Filter</span><span class="token punctuation">(</span>type<span class="token operator">=</span><span class="token class-name">FilterType</span><span class="token punctuation">.</span>ANNOTATION<span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token annotation punctuation">@ComponentScan.Filter</span><span class="token punctuation">(</span>type<span class="token operator">=</span> ASSIGNABLE_TYPE<span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token class-name">WebAppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">RootConfig</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span></code></pre> <p>定义子容器的配置类，只扫描有@RestController和@Controller注解的类，同时需要添加@EnableWebMvc注解</p> <p>子容器的配置类，可以实现WebMvcConfigurer接口，该接口中提供了添加拦截器、资源处理器、参数解析器等的扩展，下面我们只配置添加一个拦截器</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token string">"com.lizhi"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>includeFilters<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@ComponentScan.Filter</span><span class="token punctuation">(</span>type<span class="token operator">=</span><span class="token class-name">FilterType</span><span class="token punctuation">.</span>ANNOTATION<span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token class-name">RestController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>useDefaultFilters<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableWebMvc</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">WebAppConfig</span><span class="token keyword">implements</span><span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">{<!-- --></span><span class="token comment">/**     * 配置拦截器     * @return     */</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span><span class="token class-name">LizhiInterceptor</span><span class="token function">lizhiInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">LizhiInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token function">lizhiInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">LizhiInterceptor</span><span class="token keyword">implements</span><span class="token class-name">HandlerInterceptor</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token keyword">boolean</span><span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span><span class="token keyword">throws</span><span class="token class-name">Exception</span><span class="token punctuation">{<!-- --></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Interceptor....preHandle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h3><a id="12__66" rel="nofollow"></a>1.2 实现初始化器接口</h3> <p>上面定义完了配置类，但是并没有配置这两个配置类该给哪个容器用，所以，接下来就是要去实现AbstractAnnotationConfigDispatcherServletInitializer抽象类，定义每个容器启动时加载的类</p> <p>在创建容器时，可以通过下面的方法，来获取配置类进行解析</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">LizhiStarterInitializer</span><span class="token keyword">extends</span><span class="token class-name">AbstractAnnotationConfigDispatcherServletInitializer</span><span class="token punctuation">{<!-- --></span><span class="token comment">// IOC 父容器的启动类</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">getRootConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{<!-- --></span><span class="token class-name">RootConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// IOC子容器配置 web容器配置</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">getServletConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{<!-- --></span><span class="token class-name">WebAppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 我们前端控制器DispatcherServlet的拦截路径</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{<!-- --></span><span class="token string">"/"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h2><a id="Spring_MVC_SPI_95" rel="nofollow"></a>二、Spring MVC容器启动灵魂 —SPI</h2> <p>在使用Spring MVC整合Spring的时候，我们没有像执行main()方法一样去手动创建Spring的容器，那么Spring的容器又是在什么时候创建的，这就要说到Java强大的扩展机制 ——SPI(Service Provider Interface))，翻译过来就是服务提供商接口，那SPI是如何用的呢？</p> <h3><a id="21_JavaSPI_99" rel="nofollow"></a>2.1 Java扩展机制SPI</h3> <p>按照Java的SPI规范，我们只要在META-INF/services目录创建一个文件，文件名就是服务提供商提供的接口名，而文件内容就是实现这个接口的类的全限定名，然后Java在运行时候，可以通过ServiceLoader来加载这些类，这种方法提供了良好的扩展，下面代码示例SPI的使用：</p> <p>定义一个接口：</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">interface</span><span class="token class-name">Search</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token function">searchDoc</span><span class="token punctuation">(</span><span class="token class-name">String</span> keyword<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>定义两个接口的实现类：</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">FileSearch</span><span class="token keyword">implements</span><span class="token class-name">Search</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token function">searchDoc</span><span class="token punctuation">(</span><span class="token class-name">String</span> keyword<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件搜索 "</span><span class="token operator">+</span>keyword<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">DatabaseSearch</span><span class="token keyword">implements</span><span class="token class-name">Search</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token function">searchDoc</span><span class="token punctuation">(</span><span class="token class-name">String</span> keyword<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据搜索 "</span><span class="token operator">+</span>keyword<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>然后在META-INF/services目录下创建一个接口权限名的文件：</p> <p><img decoding="async" src="http://query.52xam.cn:15222/uploads_dev/2http://img.555519.xyz/uploads3/20220902/954e3384a4d7968e5b3e57f60bb9efcf.jpg22http://img.555519.xyz/uploads3/20220902/954e3384a4d7968e5b3e57f60bb9efcf.jpg819/4cf19637c822196d9aa4a1ce31chttp://img.555519.xyz/uploads3/20220902/954e3384a4d7968e5b3e57f60bb9efcf.jpg51fb.jpg" alt="Spring MVC启动原理详解" width="33%"/></p> <p>文件内容如下：</p> <pre><code class="prism language-tex">com.lizhi.FileSearch com.lizhi.DatabaseSearch</code></pre> <p>测试方法：ServiceLoader的load()方法会拿到接口对应的文件里面的实现类，然后在iterator的next()方法中，会去实例化这些实现类，这就是Java SPI的使用</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">TestCase</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Search</span><span class="token punctuation">&gt;</span></span> s<span class="token operator">=</span><span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Search</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Search</span><span class="token punctuation">&gt;</span></span> iterator<span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">Search</span> search<span class="token operator">=</span>  iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             search<span class="token punctuation">.</span><span class="token function">searchDoc</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p><strong>注：数据库连接的依赖包中，比如mysql-connector-java-5.1.44.jar，也有利用这种SPI机制来加载驱动</strong></p> <h3><a id="22_ServletSPI_161" rel="nofollow"></a>2.2 Servlet规范中的SPI</h3> <p>在Servlet3.1的规范中，明确指出Web容器需要支持对javax.servlet.ServletContainerInitailizer接口的扩展，Web容器(Tomcat)在启动的的时候，会根据META-INF/services目录中的文件内容，去加载所有ServletContainerInitailizer的实现类，然后调用它们的onStartup()方法</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">interface</span><span class="token class-name">ServletContainerInitializer</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">,</span><span class="token class-name">ServletContext</span> ctx<span class="token punctuation">)</span><span class="token keyword">throws</span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>而Spring MVC中就定义了一个实现该接口的类SpringServletContainerInitializer</p> <p><strong>该类上面的注解@HandlesTypes指定了，在调用onStartup()方法时，第一个参数需要传入什么类型的实现类</strong></p> <p>SpringMVC指定了需要传入WebApplicationInitializer的实现类或接口</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@HandlesTypes</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationInitializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">SpringServletContainerInitializer</span><span class="token keyword">implements</span><span class="token class-name">ServletContainerInitializer</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> webAppInitializerClasses<span class="token punctuation">,</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span><span class="token keyword">throws</span><span class="token class-name">ServletException</span><span class="token punctuation">{<!-- --></span> 		……<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>SpringMVC在onStartup()方法的实现中，然后拿到了所有实现了WebApplicationInitializer接口的类和接口，但是，会把接口和抽象类过滤掉，SpringMVC自身提供了三个实现类，分别是：AbstractContextLoaderInitializer、AbstractDispatcherServletInitializer和AbstractAnnotationConfigDispatcherServletInitializer，不过这三个类都是抽象类，在启动的时候是没法使用的，这就是为什么我们在零配置使用SpringMVC的时候需要，需要添加一个类，来继承AbstractAnnotationConfigDispatcherServletInitializer抽象类</p> <p>过滤完之后，就会去遍历所有过滤得到的WebApplicationInitializer类的是实现类，然后调用它们的onStartup()方法</p> <pre><code class="prism language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebApplicationInitializer</span><span class="token punctuation">&gt;</span></span> initializers<span class="token operator">=</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>webAppInitializerClasses<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>     initializers<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>webAppInitializerClasses<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> waiClass<span class="token operator">:</span> webAppInitializerClasses<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 接口和抽象类servlet容器也会给我们，但是我们不要</span><span class="token comment">// 排除接口和容器</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>waiClass<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span>waiClass<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token class-name">WebApplicationInitializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>waiClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 实例化，然后添加到集合中</span>             initializers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationInitializer</span><span class="token punctuation">)</span><span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">accessibleConstructor</span><span class="token punctuation">(</span>waiClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>initializers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用initializer.onStartup  进行扩展</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationInitializer</span> initializer<span class="token operator">:</span> initializers<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>     initializer<span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <h2><a id="_218" rel="nofollow"></a>三、创建父子容器</h2> <h3><a id="31__22http://img.555519.xyz/uploads3/20220902/954e3384a4d7968e5b3e57f60bb9efcf.jpg" rel="nofollow"></a>3.1 创建父容器</h3> <p>在前面我们定义的AbstractAnnotationConfigDispatcherServletInitializer的实现类LizhiStarterInitializer中，并没有实现onStartup()方法，所以会去调用父类的onStartup()方法</p> <p>AbstractAnnotationConfigDispatcherServletInitializer中onStartup()方法的定义如下：</p> <p>因为其继承自AbstractContextLoaderInitializer抽象类，所以又会去调用父类的onStartup()方法</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">abstract</span><span class="token keyword">class</span><span class="token class-name">AbstractDispatcherServletInitializer</span><span class="token keyword">extends</span><span class="token class-name">AbstractContextLoaderInitializer</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span><span class="token keyword">throws</span><span class="token class-name">ServletException</span><span class="token punctuation">{<!-- --></span><span class="token comment">//registerContextLoaderListener  ok</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// registerDispatcherServlet</span><span class="token function">registerDispatcherServlet</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>     ……<span class="token punctuation">}</span></code></pre> <p>在AbstractContextLoaderInitializer类的onStartup()方法中，就会去创建Spring的父容器，然后再创建一个ContextLoaderListener类型的监听器，这个监听器实现了ServletContextListener接口，可以监听Servlet上下文信息，这个我们在使用xml开发时，是要固定配置的，后面会详细讲到这个监听器的用处</p> <p>最后把这个监听器添加到Servlet容器中</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">abstract</span><span class="token keyword">class</span><span class="token class-name">AbstractContextLoaderInitializer</span><span class="token keyword">implements</span><span class="token class-name">WebApplicationInitializer</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span><span class="token keyword">throws</span><span class="token class-name">ServletException</span><span class="token punctuation">{<!-- --></span><span class="token function">registerContextLoaderListener</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span><span class="token keyword">void</span><span class="token function">registerContextLoaderListener</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 创建父容器 ，</span><span class="token class-name">WebApplicationContext</span> rootAppContext<span class="token operator">=</span><span class="token function">createRootApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>rootAppContext<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">ContextLoaderListener</span> listener<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">ContextLoaderListener</span><span class="token punctuation">(</span>rootAppContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置初始化器</span>             listener<span class="token punctuation">.</span><span class="token function">setContextInitializers</span><span class="token punctuation">(</span><span class="token function">getRootApplicationContextInitializers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             servletContext<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>     ……<span class="token punctuation">}</span></code></pre> <p>创建父容器的方法实现在AbstractAnnotationConfigDispatcherServletInitializer类中，看到这里就很熟悉了，根据getRootConfigClasses()方法来获取父容器的配置类，然后注册该配置类，到这里，Spring容器还并没有启动，只是创建完成了而已</p> <pre><code class="prism language-java"><span class="token keyword">protected</span><span class="token class-name">WebApplicationContext</span><span class="token function">createRootApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> configClasses<span class="token operator">=</span><span class="token function">getRootConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>configClasses<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">AnnotationConfigWebApplicationContext</span> context<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">AnnotationConfigWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         context<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>configClasses<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> context<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h3><a id="32__284" rel="nofollow"></a>3.2 创建子容器</h3> <p>在AbstractDispatcherServletInitializer中，调用父类的onStartup()创建完父容器之后，接着就会去调用registerDispatcherServlet()方法来创建子容器，以及创建DispatcherServlet实例</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span><span class="token keyword">throws</span><span class="token class-name">ServletException</span><span class="token punctuation">{<!-- --></span><span class="token comment">//registerContextLoaderListener  ok</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// registerDispatcherServlet</span><span class="token function">registerDispatcherServlet</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>registerDispatcherServlet()方法中，会调用createServletApplicationContext()方法创建子容器，逻辑与创建父容器一样</p> <p>然后调用createDispatcherServlet()方法来创建DispatcherServlet，会把子容器设置到DispatcherServlet实例中，这个需要注意，在DispatcherServlet初始化的时候，会使用到子容器的</p> <p>然后就是把DispatcherServlet添加到Servlet上下文中，返回一个ServletRegistration.Dynamic的对象，然后设置一些DispatcherServlet的基础信息，这些信息都是在使用xml时需要手动配置的</p> <pre><code class="prism language-java"><span class="token keyword">protected</span><span class="token keyword">void</span><span class="token function">registerDispatcherServlet</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">String</span> servletName<span class="token operator">=</span><span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>servletName<span class="token punctuation">,</span><span class="token string">"getServletName() must not return null or empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建子容器</span><span class="token class-name">WebApplicationContext</span> servletAppContext<span class="token operator">=</span><span class="token function">createServletApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>servletAppContext<span class="token punctuation">,</span><span class="token string">"createServletApplicationContext() must not return null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建DispatcherServlet</span><span class="token class-name">FrameworkServlet</span> dispatcherServlet<span class="token operator">=</span><span class="token function">createDispatcherServlet</span><span class="token punctuation">(</span>servletAppContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ServletRegistration<span class="token punctuation">.</span>Dynamic</span> registration<span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">addServlet</span><span class="token punctuation">(</span>servletName<span class="token punctuation">,</span> dispatcherServlet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 启动时加载</span>     registration<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 映射</span>     registration<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 是否异步支持</span>     registration<span class="token punctuation">.</span><span class="token function">setAsyncSupported</span><span class="token punctuation">(</span><span class="token function">isAsyncSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置DispatcherServlet的过滤器</span><span class="token class-name">Filter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> filters<span class="token operator">=</span><span class="token function">getServletFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>filters<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Filter</span> filter<span class="token operator">:</span> filters<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">registerServletFilter</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-81175.htm">宠物粮食市场前景如何发展（宠物粮市场分析）</a></p>
                                        <p>下一个：<a href="/news/article-81814.htm">宠物领养系统功能模块（宠物领养系统功能模块有哪些）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-58469.htm" title="青浦二中高考录取率大概多少分（青浦二中高考录取率大概多少分数）">青浦二中高考录取率大概多少分（青浦二中高考录取率大概多少分数）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-13-free-ssr-subscribe.htm" title="2月13日 | 最新V2ray/SSR/Shadowrocket/Clash高速免费节点，最高速度18.1M/S 免费Clash机场订阅地址">2月13日 | 最新V2ray/SSR/Shadowrocket/Clash高速免费节点，最高速度18.1M/S 免费Clash机场订阅地址</a></li>
                        <li class="py-2"><a href="/news/article-41537.htm" title="领域事件和集成事详解">领域事件和集成事详解</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-15-shadowrocket-node.htm" title="1月15日 | 最新Clash/Shadowrocket/V2ray/SSR高速免费节点，最高速度20.2M/S 免费Clash机场订阅地址">1月15日 | 最新Clash/Shadowrocket/V2ray/SSR高速免费节点，最高速度20.2M/S 免费Clash机场订阅地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-7-free-subscribe-node.htm" title="1月7日 | 最新Shadowrocket/V2ray/SSR/Clash高速免费节点，最高速度20.8M/S 免费Clash机场订阅地址">1月7日 | 最新Shadowrocket/V2ray/SSR/Clash高速免费节点，最高速度20.8M/S 免费Clash机场订阅地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-28-free-v2ray.htm" title="1月28日 | 最新Clash/Shadowrocket/V2ray/SSR高速免费节点，最高速度18.5M/S 免费Clash机场订阅地址">1月28日 | 最新Clash/Shadowrocket/V2ray/SSR高速免费节点，最高速度18.5M/S 免费Clash机场订阅地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-5-free-clash.htm" title="2月5日 | 最新Shadowrocket/V2ray/Clash/SSR高速免费节点，最高速度23M/S 免费Clash机场订阅地址">2月5日 | 最新Shadowrocket/V2ray/Clash/SSR高速免费节点，最高速度23M/S 免费Clash机场订阅地址</a></li>
                        <li class="py-2"><a href="/news/article-52092.htm" title="猫咬了多久过安全期,不打针会怎么样（猫咬了多长时间知道安全了）">猫咬了多久过安全期,不打针会怎么样（猫咬了多长时间知道安全了）</a></li>
                        <li class="py-2"><a href="/news/article-74335.htm" title="宠物粮食厂家电话 宠物粮食厂家电话号码">宠物粮食厂家电话 宠物粮食厂家电话号码</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-19-clash-windows.htm" title="1月19日 | 最新SSR/V2ray/Clash/Shadowrocket高速免费节点，最高速度20.1M/S 免费Clash机场订阅地址">1月19日 | 最新SSR/V2ray/Clash/Shadowrocket高速免费节点，最高速度20.1M/S 免费Clash机场订阅地址</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            </div>
        </section>
    </main><!-- End #main -->
        <!-- ======= Footer ======= -->
    <footer id="footer">
        <div class="container">
            <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                ShareClash官网订阅站 版权所有
                <br />
                Powered by WordPress
            </div>
        </div>
    </footer><!-- End Footer -->
    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/shareclash/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/shareclash/aos/aos.js"></script>
    <script src="/assets/website/js/frontend/shareclash/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/shareclash/isotope-layout/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/shareclash/php-email-form/validate.js"></script>
    <script src="/assets/website/js/frontend/shareclash/swiper/swiper-bundle.min.js"></script>
    <!-- Template Main JS File -->
    <script src="/assets/website/js/frontend/shareclash/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>